---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ .Values.releaseName }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.releaseName }}
spec:
  replicas: 1
  template:
    metadata:
      name: {{ .Values.releaseName }}
      namespace: {{ .Values.namespace }}
      labels:
        app: {{ .Values.releaseName }}
    spec:
      #  [WARN  tini (122)] Tini is not running as PID 1 and isn't registered as a child subreaper.
      #  Zombie processes will not be re-parented to Tini, so zombie reaping won't work.
      #  To fix the problem, use the -s option or set the environment variable TINI_SUBREAPER to register Tini as a child subreaper, or run Tini as PID 1.
      #  Creating new 'host_docker' group with GID=999 with access to docker.sock
      #  Adding user 'jenkins' to group 'host_docker'
      #  touch: cannot touch '/var/jenkins_home/copy_reference_file.log': Permission denied
      #  Can not write to /var/jenkins_home/copy_reference_file.log. Wrong volume permissions?
      # Mark says: You need to run the jenkins process as root. You can accomplish that through the pod spec.
      # TODO: legacy item - we probably don't need to run as root with our image
      securityContext:
        runAsUser: 0
      nodeSelector:
        node-type: dev
      containers:
      - name: {{ .Values.releaseName }}
        image: {{ .Values.service.image.nameTag }}
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        - containerPort: 50000
        env:
        - name: INITIAL_START_DELAY
          value: "{{ .Values.service.initialStartDelay }}"
        volumeMounts:
        - name: dockersock
          mountPath: /var/run/docker.sock
        {{- if eq .Values.minikube.enabled false }}
        - name: jenkinshome
          mountPath: "/var/jenkins_home"
        {{- end }}
        resources:
          # TODO: fill this in after load testing
      volumes:
      - name: dockersock
        hostPath:
          path: /var/run/docker.sock

      imagePullSecrets:
      - name: docker-registry-credentials

